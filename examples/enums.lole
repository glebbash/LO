(mem m :min 100)
(export main :as main)

(enum ParseResult
    (Ok (value u32))
    (Err (error u32))
)
;; desugars to:
;; (struct ParseResult (kind u32) (ref ptr))
;; (struct ParseResult/Ok (value u32))
;; (struct ParseResult/Err (error u32))

(fn main [] [u32] (
    {res : ParseResult}
    {res = (do_stuff)}

    (if {{res . kind} == (enum.kind ParseResult/Ok)} (do
        {res_ok : ParseResult/Ok}
        {res_ok = (load ParseResult/Ok {res . ref})}
        (return {res_ok . value})
    ))

    (return 0)
))

(fn do_stuff [] [ParseResult] (
    {ref : ptr}
    {ref = (alloc (sizeof ParseResult/Ok))}
    (store ParseResult/Ok ref (struct.new ParseResult/Ok 1))

    (return (struct.new ParseResult
        (enum.kind ParseResult/Ok)
        ref
    ))
))

(global mut HEAP_INDEX u32 0)
(fn alloc [(size u32)] [ptr] (
    {ref : ptr}
    {ref = HEAP_INDEX}
    {HEAP_INDEX = {HEAP_INDEX + size}}
    (return ref)
))
