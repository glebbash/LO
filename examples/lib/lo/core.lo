include "./core-types.lo";
include "./parser.lo";

fn LoContext::new(): &LoContext {
    return heap::new!<LoContext>(.LoContext {
        included_files: Vec::new!<LoIncludedFile>(),
        wasm_module: WasmModule::new(),
        fn_defs: StringMap::new!<LoFnDef>(),
        fn_exports: Vec::new!<LoFnExport>(),
        memories: StringMap::new!<u32>(),
        fn_bodies: Vec::new!<LoFnBody>(),
        imported_fns_count: 0,
        type_scope: heap::new!<LoTypeScope>(.LoTypeScope {
        }),
    });
};

fn LoContext::print_loc(&self, loc: LoLocation) {
    if loc.file_index == LoLocation::INTERNAL_FILE_INDEX {
        eputs("<internal>");
    } else {
        let file = self.included_files.get!<LoIncludedFile>(loc.file_index);
        eputs(file.path.as_str());
    };
    eputs(":");
    eprint_u32(loc.pos.line);
    eputs(":");
    eprint_u32(loc.pos.col);
};

fn LoContext::include_file_and_finalize(&self, file_path: str): Result<u32, &LoError> {
    let file_index = LoContext::include_file(self, file_path)?;
    self.finalize()?;
    return Ok(file_index);
};

fn LoContext::include_file(&self, file_path: str): Result<u32, &LoError> {
    let file_contents = fs::read_file(file_path) catch err {
        let message = String::from_str("Cannot include file: ");
        message.push_str(file_path);
        message.push('\n');
        return Err(heap::new!<LoError>(.LoError {
            message: message,
            loc: LoLocation::internal(),
        }));
    };
    self.included_files.push!<LoIncludedFile>(.LoIncludedFile {
        path: String::from_str(file_path),
        contents: file_contents,
    });
    let file_index = self.included_files.size - 1;
    let lexer = LoLexer::new(file_index, file_contents.as_str());
    let tokens = lexer.lex_all()?;
    let parser = .LoParser {
        ctx: self,
        tokens: tokens,
    };
    parser.parse_all()?;
    return Ok(file_index);
};

fn LoContext::get_file(&self, file_index: u32): &LoIncludedFile {
    return self.included_files.at!<LoIncludedFile>(file_index);
};

fn LoContext::insert_fn_type(&self, fn_type: WasmFnType): u32 {
    for type_index in 0..self.wasm_module.types.size {
        if self.wasm_module.types.get!<WasmFnType>(type_index).equals(fn_type) {
            return type_index;
        };
    };
    self.wasm_module.types.push!<WasmFnType>(fn_type);
    return self.wasm_module.types.size - 1;
};

// TODO: implement complete version
fn LoContext::finalize(&self): Result<void, &LoError> {
    // push function exports
    for i in 0..self.fn_exports.size {
        let fn_export = self.fn_exports.get!<LoFnExport>(i);
        // safe
        let fn_def = *self.fn_defs.get!<LoFnDef>(fn_export.in_name.as_str());
        self.wasm_module.exports.push!<WasmExport>(.WasmExport {
            name: fn_export.out_name.clone(),
            item_type: WasmExportType::Fn,
            item_index: fn_def.get_absolute_index(self),
        });
    };
    // push function codes
    for i in 0..self.fn_bodies.size {
        let fn_body = self.fn_bodies.get!<LoFnBody>(i);
        let contents = LoParser::parse_block_contents(self, fn_body.body, LoType::Void!())?;
        let instrs = Vec::new!<WasmInstr>();
        LoInstr::lower_all(contents.exprs, instrs);
        self.wasm_module.codes.push!<WasmCode>(.WasmCode {
            locals: Vec::new!<WasmLocals>(),
            expr: .WasmExpr {
                instrs: instrs,
            },
        });
    };
    return Ok();
};

// TODO: implement
// TODO: where should this be defined?
fn WasmFnType::equals(self, other: WasmFnType): bool {
    return false;
};
