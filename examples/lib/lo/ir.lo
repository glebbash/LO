include "../std.lo";
include "../fs.lo";
include "../string_map.lo";
include "./utils.lo";
include "./wasm.lo";
include "./lexer.lo";

type LoType::_ = u32;

struct LoType {
    kind: LoType::_,
    data: &void,
};

// TODO: define all types
const LoType::Void = 0;

macro LoType::Void!(): LoType {
    .LoType {
        kind: LoType::Void,
        data: 0 as &void,
    };
};

const LoType::U32 = 1;

macro LoType::U32!(): LoType {
    .LoType {
        kind: LoType::U32,
        data: 0 as &void,
    };
};

// TODO: implement
fn LoType::clone(self): LoType {
    return self;
};

// TODO: add all fields
struct LoTypeScope {};

struct LoFnParam {
    name: String,
    type_: LoType,
    loc: LoLocation,
};

struct LoFnType {
    inputs: &Vec of LoType,
    output: LoType,
};

struct LoLocalDef {
    index: u32,
    value_type: LoType,
    loc: LoLocation,
};

struct LoFnDecl {
    fn_name: String,
    method_name: String,
    loc: LoLocation,
    fn_params: &Vec of LoFnParam,
    lo_type: LoFnType,
    wasm_type: WasmFnType,
    locals: StringMap of LoLocalDef,
};

struct LoFnDef {
    local: bool,
    fn_index: u32,
    fn_params: &Vec of LoFnParam,
    type_index: u32,
    type_: LoFnType,
    loc: LoLocation,
};

struct LoFnExport {
    in_name: String,
    out_name: String,
};

struct LoFnBody {
    fn_index: u32,
    type_index: u32,
    locals: StringMap of LoLocalDef,
    locals_last_index: u32,
    body: &LoTokenStream,
};

type LoInstr::Kind = u32;

struct LoInstr {
    kind: LoInstr::Kind,
    data: &void,
};

const LoInstr::U32Const::KIND = 0;

type LoInstr::U32Const = u32;

macro LoInstr::U32Const::new!(value: u32): LoInstr {
    .LoInstr {
        kind: LoInstr::U32Const::KIND,
        // TODO: won't need a cast if coersion is introduced
        data: value as &void,
    };
};

const LoInstr::Return::KIND = 1;

struct LoInstr::Return {
    value: LoInstr,
};

macro LoInstr::Return::new!(value: LoInstr): LoInstr {
    .LoInstr {
        kind: LoInstr::Return::KIND,
        // TODO: won't need a cast if coersion is introduced
        data: heap::new!(.LoInstr::Return {
            value: value,
        }) as &void,
    };
};

const LoInstr::CallAndDrop::KIND = 2;

// TODO: this instruction is temporary
struct LoInstr::CallAndDrop {
    fn_index: u32,
    return_type: LoType,
    args: &Vec of LoInstr,
};

macro LoInstr::CallAndDrop::new!(fn_index: u32, return_type: LoType, args: &Vec of LoInstr): LoInstr {
    .LoInstr {
        kind: LoInstr::CallAndDrop::KIND,
        // TODO: won't need a cast if coersion is introduced
        data: heap::new!(.LoInstr::CallAndDrop {
            fn_index: fn_index,
            return_type: return_type,
            args: args,
        }) as &void,
    };
};

const LoInstr::U32Store::KIND = 3;

// TODO: this instruction is temporary
struct LoInstr::U32Store {
    address: LoInstr,
    value: LoInstr,
};

macro LoInstr::U32Store::new!(address: LoInstr, value: LoInstr): LoInstr {
    .LoInstr {
        kind: LoInstr::U32Store::KIND,
        // TODO: won't need a cast if coersion is introduced
        data: heap::new!(.LoInstr::U32Store {
            address: address,
            value: value,
        }) as &void,
    };
};

// TODO: implement
fn LoInstr::free(self) {
};

fn LoInstr::lower_all(exprs: &Vec of LoInstr, out: &Vec of WasmInstr) {
    for i in 0..exprs.size {
        exprs.get!<LoInstr>(i).lower(out);
    };
};

// TODO: implement complete
fn LoInstr::lower(self, out: &Vec of WasmInstr) {
    if self.kind == LoInstr::U32Const::KIND {
        out.push!(WasmInstr::I32Const::new(self.data as i32));
        return;
    };
    if self.kind == LoInstr::Return::KIND {
        (*(self.data as &LoInstr)).lower(out);
        out.push!(WasmInstr::Return::new());
        return;
    };
    if self.kind == LoInstr::U32Store::KIND {
        let store = *(self.data as &LoInstr::U32Store);
        store.address.lower(out);
        store.value.lower(out);
        out.push!(WasmInstr::I32Store::new(0, 0));
        return;
    };
    if self.kind == LoInstr::CallAndDrop::KIND {
        let call = *(self.data as &LoInstr::CallAndDrop);
        LoInstr::lower_all(call.args, out);
        out.push!(WasmInstr::Call::new(call.fn_index));
        out.push!(WasmInstr::Drop::new());
        return;
    };
    unreachable;
};
