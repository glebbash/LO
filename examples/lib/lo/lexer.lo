include "./utils.lo";

type LoTokenType = u8;

const LoTokenType::StringLiteral = 0 as u8;
const LoTokenType::CharLiteral = 1 as u8;
const LoTokenType::IntLiteral = 2 as u8;
const LoTokenType::Symbol = 3 as u8;
const LoTokenType::Delim = 4 as u8;
const LoTokenType::Operator = 5 as u8;

fn LoTokenType::to_str(self): str {
    if self == LoTokenType::StringLiteral {
        return "StringLiteral";
    } else if self == LoTokenType::CharLiteral {
        return "CharLiteral";
    } else if self == LoTokenType::IntLiteral {
        return "IntLiteral";
    } else if self == LoTokenType::Symbol {
        return "Symbol";
    } else if self == LoTokenType::Delim {
        return "Delim";
    } else if self == LoTokenType::Operator {
        return "Operator";
    };
    unreachable;
};

struct LoToken {
    type_: LoTokenType,
    // NOTE: this points inside of file contents
    // and is only valid while file buffer is not freed
    repr: str,
    loc: LoLocation,
    value: &void,
};

fn LoToken::free(self) {
    if self.type_ == LoTokenType::IntLiteral {
        heap::free(self.value);
    } else if self.type_ == LoTokenType::StringLiteral {
        (self.value as String).free();
    };
};

fn LoToken::clone(self): LoToken {
    if self.type_ == LoTokenType::IntLiteral {
        // TODO: won't need a cast if coersion is introduced
        self.value = heap::new!(*(self.value as &u64)) as &void;
    } else if self.type_ == LoTokenType::StringLiteral {
        // TODO: won't need a cast if coersion is introduced
        self.value = (self.value as String).clone() as &void;
    };
    return self;
};

fn LoToken::is_any(self, type_: LoTokenType): bool {
    return self.type_ == type_;
};

fn LoToken::is(self, type_: LoTokenType, repr: str): bool {
    return self.is_any(type_) && self.repr.equals(repr);
};

struct LoTokenStream {
    tokens: &Vec of LoToken,
    index: u32,
    terminal_token: LoToken,
};

// TODO: replace with C-style optional handling
struct LoTokenMaybe {
    token: LoToken,
    exists: bool,
};

macro LoTokenMaybe::some!(t: LoToken): LoTokenMaybe {
    .LoTokenMaybe {
        token: t,
        exists: true,
    };
};

macro LoTokenMaybe::none!(tokens: &LoTokenStream): LoTokenMaybe {
    .LoTokenMaybe {
        token: tokens.terminal_token,
        exists: false,
    };
};

fn LoTokenStream::new(tokens: &Vec of LoToken, eof_location: LoLocation): &LoTokenStream {
    return heap::new!(.LoTokenStream {
        tokens: tokens,
        index: 0,
        terminal_token: .LoToken {
            type_: LoTokenType::Symbol,
            repr: "<EOF>",
            loc: eof_location,
            value: 0 as &void,
        },
    });
};

fn LoTokenStream::free(&self) {
    for i in 0..self.tokens.size {
        let t = self.tokens.get!<LoToken>(i);
        t.free();
    };
    // TODO: won't need a cast if coersion is introduced
    heap::free(self as &void);
};

fn LoTokenStream::expect(&self, type_: LoTokenType, repr: str): Result<LoToken, &LoError> {
    let maybe_token = self.peek();
    if maybe_token.exists && maybe_token.token.is(type_, repr) {
        let _ = self.next();
        return Ok(maybe_token.token);
    };
    // defaults to terminal token
    let unexpected = maybe_token.token;
    let message = String::from_str("Unexpected token '");
    message.push_str(unexpected.repr);
    message.push_str("', wanted '");
    message.push_str(repr);
    message.push_str("'");
    return Err(heap::new!(.LoError {
        message: message,
        loc: unexpected.loc,
    }));
};

fn LoTokenStream::expect_any(&self, type_: LoTokenType): Result<LoToken, &LoError> {
    let maybe_token = self.peek();
    if maybe_token.exists && maybe_token.token.is_any(type_) {
        let _ = self.next();
        return Ok(maybe_token.token);
    };
    // defaults to terminal token
    let unexpected = maybe_token.token;
    let message = String::from_str("Unexpected token '");
    message.push_str(unexpected.repr);
    message.push_str("', wanted '");
    message.push_str(LoTokenType::to_str(type_));
    message.push_str("'");
    return Err(heap::new!(.LoError {
        message: message,
        loc: unexpected.loc,
    }));
};

fn LoTokenStream::eat_any(&self, type_: LoTokenType): Result<LoTokenMaybe, &LoError> {
    let token = self.expect_any(type_) catch err {
        let some_token = self.peek();
        if !some_token.exists {
            return Err(err);
        };
        return Ok(LoTokenMaybe::none!(self));
    };
    return Ok(LoTokenMaybe::some!(token));
};

fn LoTokenStream::eat(&self, type_: LoTokenType, repr: str): Result<LoTokenMaybe, &LoError> {
    let token = self.expect(type_, repr) catch err {
        let some_token = self.peek();
        if !some_token.exists {
            return Err(err);
        };
        return Ok(LoTokenMaybe::none!(self));
    };
    return Ok(LoTokenMaybe::some!(token));
};

fn LoTokenStream::next_is(&self, type_: LoTokenType, repr: str): Result<bool, &LoError> {
    let some_token = self.peek();
    if !some_token.exists {
        return Err(heap::new!(.LoError {
            message: String::from_str("Unexpected EOF"),
            loc: self.terminal_token.loc,
        }));
    };
    return Ok(some_token.token.is(type_, repr));
};

fn LoTokenStream::peek(&self): LoTokenMaybe {
    if self.index >= self.tokens.size {
        return LoTokenMaybe::none!(self);
    };
    return LoTokenMaybe::some!(self.tokens.get!<LoToken>(self.index));
};

fn LoTokenStream::next(&self): LoTokenMaybe {
    let token = self.peek();
    if token.exists {
        self.index += 1;
    };
    return token;
};

fn LoTokenStream::loc(&self): LoLocation {
    let some_token = self.peek();
    if some_token.exists {
        return some_token.token.loc;
    };
    return self.terminal_token.loc;
};

struct LoLexer {
    file_index: u32,
    chars: str,
    index: u32,
    line: u32,
    col: u32,
    was_newline: bool,
};

fn LoLexer::new(file_index: u32, chars: str): &LoLexer {
    return heap::new!(.LoLexer {
        file_index: file_index,
        chars: chars,
        index: 0,
        line: 1,
        col: 1,
        was_newline: false,
    });
};

fn LoLexer::lex_all(&self): Result<&LoTokenStream, &LoError> {
    let tokens = Vec::new!<LoToken>();
    self.skip_space();
    loop {
        if self.index >= self.chars.size {
            break;
        };
        tokens.push!<LoToken>(self.lex_token()?);
        self.skip_space();
    };
    return Ok(LoTokenStream::new(tokens, self.loc()));
};

type LexResult = Result<LoToken, &LoError>;

fn LoLexer::lex_token(&self): LexResult {
    let c = self.current_char()?;
    if c == '\'' {
        return self.lex_char();
    };
    if c == '"' {
        return self.lex_string();
    };
    if char_is_numeric(c) {
        return self.lex_int_literal();
    };
    // NOTE: must be after int because is_symbol_char matches digits
    if LoLexer::is_symbol_char(c) {
        return self.lex_symbol();
    };
    if LoLexer::is_delim_char(c) {
        return self.lex_delim();
    };
    if LoLexer::is_operator_start_char(c) {
        return self.lex_operator();
    };
    let message = String::from_str("Unexpected char: ");
    message.push(c);
    return Err(heap::new!(.LoError {
        message: message,
        loc: self.loc(),
    }));
};

fn LoLexer::lex_symbol(&self): LexResult {
    let loc = self.loc();
    loop {
        let c = self.current_char()?;
        if !LoLexer::is_symbol_char(c) {
            break;
        };
        self.next_char();
    };
    loc.end_pos = self.pos();
    return Ok(.LoToken {
        type_: LoTokenType::Symbol,
        repr: self.chars.slice(loc.pos.offset, loc.end_pos.offset),
        loc: loc,
        value: 0 as &void,
    });
};

fn LoLexer::lex_char(&self): LexResult {
    let loc = self.loc();
    // skip start quote
    self.next_char();
    let c = self.current_char()?;
    let value = c;
    if c == '\\' {
        self.next_char();
        c = self.current_char()?;
        if c == 'n' {
            value = '\n';
        } else if c == 'r' {
            value = '\r';
        } else if c == 't' {
            value = '\t';
        } else if c == '0' {
            value = '\0';
        } else if c == '\\' {
            value = '\\';
        } else if c == '\'' {
            value = '\'';
        } else {
            let message = String::from_str("ParseError: Invalid escape sequence: \\");
            message.push(c as u8);
            return Err(heap::new!(.LoError {
                message: message,
                loc: self.loc(),
            }));
        };
    };
    // skip actual character
    self.next_char();
    if self.current_char()? != '\'' {
        let message = String::from_str("ParseError: Unexpected character `");
        message.push(c as u8);
        message.push_str("`, expected `'`");
        return Err(heap::new!(.LoError {
            message: message,
            loc: self.loc(),
        }));
    };
    // skip end quote
    self.next_char();
    loc.end_pos = self.pos();
    return Ok(.LoToken {
        type_: LoTokenType::Symbol,
        repr: self.chars.slice(loc.pos.offset, loc.end_pos.offset),
        loc: loc,
        // TODO: won't need a cast if coersion is introduced
        value: value as &void,
    });
};

fn LoLexer::lex_string(&self): LexResult {
    let loc = self.loc();
    // skip start quote
    self.next_char();
    let value = String::new(10);
    loop {
        let c = self.current_char()?;
        if c == '"' {
            break;
        } else if c == '\\' {
            self.next_char();
            c = self.current_char()?;
            if c == 'n' {
                value.push('\n');
            } else if c == 'r' {
                value.push('\r');
            } else if c == 't' {
                value.push('\t');
            } else if c == '0' {
                value.push('\0');
            } else if c == '\\' {
                value.push('\\');
            } else if c == '"' {
                value.push('"');
            } else {
                let message = String::from_str("ParseError: Invalid escape sequence: \\");
                message.push(c as u8);
                return Err(heap::new!(.LoError {
                    message: message,
                    loc: self.loc(),
                }));
            };
        } else {
            value.push(c);
        };
        self.next_char();
    };
    // skip end quote
    self.next_char();
    loc.end_pos = self.pos();
    return Ok(.LoToken {
        type_: LoTokenType::StringLiteral,
        repr: self.chars.slice(loc.pos.offset, loc.end_pos.offset),
        loc: loc,
        // TODO: won't need a cast if coersion is introduced
        value: value as &void,
    });
};

fn LoLexer::lex_int_literal(&self): LexResult {
    let loc = self.loc();
    let c = self.current_char()?;
    let is_hex = false;
    if c == '0' {
        let next_char = self.peek_next_char() catch err {
            err.free();
            '\0';
        };
        if next_char == 'x' {
            is_hex = true;
            // skip '0'
            self.next_char();
            // skip 'x'
            self.next_char();
        };
    };
    let value = 0u64;
    loop {
        c = self.current_char()?;
        if c == '_' {
            self.next_char();
        } else if c >= '0' && c <= '9' {
            if is_hex {
                value *= 16u64;
            } else {
                value *= 10u64;
            };
            value += (c - '0') as u64;
            self.next_char();
        } else if is_hex && c >= 'A' && c <= 'F' {
            value *= 16u64;
            value += 10u64 + (c - 'A') as u64;
            self.next_char();
        } else {
            break;
        };
    };
    loc.end_pos = self.pos();
    return Ok(.LoToken {
        type_: LoTokenType::IntLiteral,
        repr: self.chars.slice(loc.pos.offset, loc.end_pos.offset),
        loc: loc,
        // TODO: won't need a cast if coersion is introduced
        value: heap::new!(value) as &void,
    });
};

fn LoLexer::lex_delim(&self): LexResult {
    let loc = self.loc();
    // skip delimiter char
    self.next_char();
    return Ok(.LoToken {
        type_: LoTokenType::Delim,
        repr: self.chars.slice(loc.pos.offset, self.index),
        loc: loc,
        value: 0 as &void,
    });
};

// TODO(qol): find a way to get length of array
const OPERATORS_COUNT = 37;
const OPERATORS = [str][
    // Assignment
    "=",
    // Equality comparison
    "==",
    // Nonequality comparison
    "!=",
    // Logical NOT
    "!",
    // Short-circuiting logical AND
    "&&",
    // Short-circuiting logical OR
    "||",
    // Less than comparison
    "<",
    // Less than or equal to comparison
    "<=",
    // Greater than comparison
    ">",
    // Greater than or equal to comparison
    ">=",
    // Arithmetic addition
    "+",
    // Arithmetic addition and assignment
    "+=",
    // Arithmetic subtraction
    "-",
    // Arithmetic subtraction and assignment
    "-=",
    // Arithmetic multiplication
    "*",
    // Arithmetic multiplication and assignment
    "*=",
    // Arithmetic division
    "/",
    // Arithmetic division and assignment
    "/=",
    // Arithmetic remainder
    "%",
    // Arithmetic remainder and assignment
    "%=",
    // Bitwise AND / Pointer to one
    "&",
    // Pointer to any amount
    "*&",
    // Bitwise AND and assignment
    "&=",
    // Left-shift
    "<<",
    // Left-shift and assignment
    "<<=",
    // Part of match arm syntax
    "=>",
    // Right-shift
    ">>",
    // Right-shift and assignment
    ">>=",
    // Bitwise exclusive OR
    "^",
    // Bitwise exclusive OR and assignment
    "^=",
    // Bitwise OR
    "|",
    // Bitwise OR and assignment
    "|=",
    // Member access
    ".",
    // Range operator
    "..",
    // Type separator
    ":",
    // Path separator
    "::",
    // Memory index separator, defer label prefix
    "@",
];

fn LoLexer::is_operator_start_char(c: u8): bool {
    for i in 0..(OPERATORS_COUNT) {
        let op = *array_at!<str>(OPERATORS, i);
        if op.char_at(0) == c {
            return true;
        };
    };
    return false;
};

fn LoLexer::lex_operator(&self): LexResult {
    let loc = self.loc();
    let repr = "";
    loop {
        repr = self.chars.slice(loc.pos.offset, self.index + 1);
        let is_start_of_operator = false;
        for i in 0..(OPERATORS_COUNT) {
            let op = *array_at!<str>(OPERATORS, i);
            if op.starts_with(repr) {
                is_start_of_operator = true;
                break;
            };
        };
        if !is_start_of_operator {
            repr = repr.slice(0, repr.size - 1);
            break;
        };
        self.next_char();
    };
    let matched_fully = false;
    for i in 0..(OPERATORS_COUNT) {
        let op = *array_at!<str>(OPERATORS, i);
        if op.equals(repr) {
            matched_fully = true;
            break;
        };
    };
    if !matched_fully {
        let message = String::from_str("Unexpected char: ");
        message.push(self.current_char()?);
        return Err(heap::new!(.LoError {
            message: message,
            loc: self.loc(),
        }));
    };
    loc.end_pos = self.pos();
    return Ok(.LoToken {
        type_: LoTokenType::Operator,
        repr: repr,
        loc: loc,
        value: 0 as &void,
    });
};

fn LoLexer::skip_space(&self) {
    let c = '\0';
    loop {
        c = self.current_char() catch err {
            err.free();
            return;
        };
        if !LoLexer::is_space_char(c) {
            break;
        };
        self.next_char();
    };
    // skip comment
    if c == '/' {
        let next = self.peek_next_char() catch err {
            err.free();
            return;
        };
        if next != '/' {
            return;
        };
        loop {
            self.next_char();
            c = self.current_char() catch err {
                err.free();
                return;
            };
            if c == '\n' {
                self.skip_space();
                break;
            };
        };
    };
};

fn LoLexer::next_char(&self) {
    self.index += 1;
    let c = self.current_char() catch err {
        err.free();
        return;
    };
    self.col += 1;
    if c == '\n' {
        // NOTE(edge case): when first character is encountered
        //  was_newline is not true but rather undefined,
        //  thus we don't bump the line count
        if self.index != 0 && self.was_newline {
            self.line += 1;
        };
        self.was_newline = true;
        return;
    };
    if self.was_newline {
        self.line += 1;
        self.col = 1;
        self.was_newline = false;
        return;
    };
};

fn LoLexer::current_char(&self): Result<u8, &LoError> {
    if self.index >= self.chars.size {
        return Err(self.err_unexpected_eof());
    };
    return Ok(self.chars.char_at(self.index));
};

fn LoLexer::peek_next_char(&self): Result<u8, &LoError> {
    if self.index + 1 >= self.chars.size {
        return Err(self.err_unexpected_eof());
    };
    return Ok(self.chars.char_at(self.index + 1));
};

fn LoLexer::err_unexpected_eof(&self): &LoError {
    return heap::new!(.LoError {
        message: String::from_str("ParseError: Unexpected EOF"),
        loc: self.loc(),
    });
};

fn LoLexer::loc(&self): LoLocation {
    return .LoLocation {
        file_index: self.file_index,
        pos: self.pos(),
        end_pos: self.pos(),
    };
};

fn LoLexer::pos(&self): LoPosition {
    return .LoPosition {
        offset: self.index,
        line: self.line,
        col: self.col,
    };
};

fn LoLexer::is_space_char(c: u8): bool {
    // TODO: find a way to format this nicer
    return c == ' ' || c == '\n' || c == '\t' || c == '\r';
};

fn LoLexer::is_symbol_char(c: u8): bool {
    // TODO: find a way to format this nicer
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '_';
};

fn LoLexer::is_delim_char(c: u8): bool {
    // TODO: find a way to format this nicer
    return c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c == ']' || c == ',' || c == ';';
};
