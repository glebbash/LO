include "../std.lo";

type Section = u8;

const Section::TYPES = 01 as u8;
const Section::IMPORTS = 02 as u8;
const Section::FUNCTIONS = 03 as u8;
const Section::MEMORIES = 05 as u8;
const Section::EXPORTS = 07 as u8;
const Section::CODES = 10 as u8;
const Section::DATAS = 11 as u8;

// types:
type WasmValueType = u8;

const WasmValueType::I32 = 0x7F as u8;

struct WasmFnType {
    inputs: &Vec of WasmValueType,
    outputs: &Vec of WasmValueType,
};

// imports:
type WasmImportType = u8;

const WasmImportType::Fn = 0x00 as u8;
const WasmImportType::Memory = 0x02 as u8;

struct WasmImport {
    module_name: String,
    item_name: String,
    item_type: WasmImportType,
    item_index: u32,
};

// codes:
struct WasmInstr {
    op_code: u8,
    data: &void,
};

// instrs:
const WasmInstr::Return::OP_CODE = 0x0F as u8;

struct WasmInstr::Return {};

fn WasmInstr::Return::new(): WasmInstr {
    return .WasmInstr {
        op_code: WasmInstr::Return::OP_CODE,
        data: 0 as &void,
        // no data
    };
};

const WasmInstr::Call::OP_CODE = 0x10 as u8;

struct WasmInstr::Call {
    fn_index: u32,
};

fn WasmInstr::Call::new(fn_index: u32): WasmInstr {
    return .WasmInstr {
        op_code: WasmInstr::Call::OP_CODE,
        // TODO: won't need a cast if coersion is introduced
        data: heap::new!(.WasmInstr::Call {
            fn_index: fn_index,
        }) as &void,
    };
};

const WasmInstr::Drop::OP_CODE = 0x1A as u8;

struct WasmInstr::Drop {};

fn WasmInstr::Drop::new(): WasmInstr {
    return .WasmInstr {
        op_code: WasmInstr::Drop::OP_CODE,
        // no data
        data: 0 as &void,
    };
};

const WasmInstr::I32Store::OP_CODE = 0x36 as u8;

struct WasmInstr::I32Store {
    align: u32,
    offset: u32,
};

fn WasmInstr::I32Store::new(align: u32, offset: u32): WasmInstr {
    return .WasmInstr {
        op_code: WasmInstr::I32Store::OP_CODE,
        // TODO: won't need a cast if coersion is introduced
        data: heap::new!(.WasmInstr::I32Store {
            align: align,
            offset: offset,
        }) as &void,
    };
};

const WasmInstr::I32Const::OP_CODE = 0x41 as u8;

struct WasmInstr::I32Const {
    value: i32,
};

fn WasmInstr::I32Const::new(value: i32): WasmInstr {
    return .WasmInstr {
        op_code: WasmInstr::I32Const::OP_CODE,
        // TODO: won't need a cast if coersion is introduced
        data: heap::new!(.WasmInstr::I32Const {
            value: value,
        }) as &void,
    };
};

struct WasmExpr {
    instrs: &Vec of WasmInstr,
};

struct WasmLocals {
    count: u32,
    value_type: WasmValueType,
};

struct WasmCode {
    locals: &Vec of WasmLocals,
    expr: WasmExpr,
};

// memories:
struct WasmMemory {
    min: u32,
    max: u32,
    has_max: bool,
};

// exports:
type WasmExportType = u8;

const WasmExportType::Fn = 0x00 as u8;
const WasmExportType::Mem = 0x02 as u8;

struct WasmExport {
    name: String,
    item_type: WasmExportType,
    item_index: u32,
};

// datas:
// only active memory is supported
struct WasmData {
    expr: WasmExpr,
    bytes: &Vec of u8,
};

// module:
struct WasmModule {
    types: &Vec of WasmFnType,
    imports: &Vec of WasmImport,
    functions: &Vec of u32,
    memories: &Vec of WasmMemory,
    exports: &Vec of WasmExport,
    codes: &Vec of WasmCode,
    datas: &Vec of WasmData,
};

fn WasmModule::new(): &WasmModule {
    return heap::new!(.WasmModule {
        types: Vec::new!<WasmFnType>(),
        imports: Vec::new!<WasmImport>(),
        functions: Vec::new!<u32>(),
        memories: Vec::new!<WasmMemory>(),
        exports: Vec::new!<WasmExport>(),
        codes: Vec::new!<WasmCode>(),
        datas: Vec::new!<WasmData>(),
    });
};

fn WasmModule::write(&self, binary: &Vec of u8) {
    self.write_preamble(binary);
    let section_buffer = Vec::new!<u8>();
    defer section_buffer.free();
    binary.push!<u8>(Section::TYPES);
    self.write_types_section(section_buffer);
    WasmModule::write_uleb128(binary, section_buffer.size);
    binary.append(section_buffer);
    binary.push!<u8>(Section::IMPORTS);
    self.write_imports_section(section_buffer);
    WasmModule::write_uleb128(binary, section_buffer.size);
    binary.append(section_buffer);
    binary.push!<u8>(Section::FUNCTIONS);
    self.write_functions_section(section_buffer);
    WasmModule::write_uleb128(binary, section_buffer.size);
    binary.append(section_buffer);
    binary.push!<u8>(Section::MEMORIES);
    self.write_memories_section(section_buffer);
    WasmModule::write_uleb128(binary, section_buffer.size);
    binary.append(section_buffer);
    binary.push!<u8>(Section::EXPORTS);
    self.write_exports_section(section_buffer);
    WasmModule::write_uleb128(binary, section_buffer.size);
    binary.append(section_buffer);
    binary.push!<u8>(Section::CODES);
    self.write_codes_section(section_buffer);
    WasmModule::write_uleb128(binary, section_buffer.size);
    binary.append(section_buffer);
    binary.push!<u8>(Section::DATAS);
    self.write_datas_section(section_buffer);
    WasmModule::write_uleb128(binary, section_buffer.size);
    binary.append(section_buffer);
};

fn WasmModule::write_preamble(&self, binary: &Vec of u8) {
    // magic
    binary.push!<u8>(0x00 as u8);
    binary.push!<u8>(0x61 as u8);
    binary.push!<u8>(0x73 as u8);
    binary.push!<u8>(0x6D as u8);
    // version
    binary.push!<u8>(0x01 as u8);
    binary.push!<u8>(0x00 as u8);
    binary.push!<u8>(0x00 as u8);
    binary.push!<u8>(0x00 as u8);
};

fn WasmModule::write_types_section(&self, out: &Vec of u8) {
    WasmModule::write_uleb128(out, self.types.size);
    for i in 0..self.types.size {
        let fn_type = self.types.get!<WasmFnType>(i);
        out.push!<u8>(0x60 as u8);
        WasmModule::write_uleb128(out, fn_type.inputs.size);
        // TODO: figure out what bug this fixes
        String::new(32).free();
        for j in 0..fn_type.inputs.size {
            let input_type = fn_type.inputs.get!<WasmValueType>(j);
            out.push!<u8>(input_type);
        };
        WasmModule::write_uleb128(out, fn_type.outputs.size);
        for j in 0..fn_type.outputs.size {
            let output_type = fn_type.outputs.get!<WasmValueType>(j);
            out.push!<u8>(output_type);
        };
    };
};

fn WasmModule::write_imports_section(&self, out: &Vec of u8) {
    WasmModule::write_uleb128(out, self.imports.size);
    for i in 0..self.imports.size {
        let import_ = self.imports.get!<WasmImport>(i);
        WasmModule::write_uleb128(out, import_.module_name.len());
        // TODO: won't need a cast if coersion is introduced
        out.push_all(import_.module_name.chars.data as &void, import_.module_name.len());
        WasmModule::write_uleb128(out, import_.item_name.len());
        // TODO: won't need a cast if coersion is introduced
        out.push_all(import_.item_name.chars.data as &void, import_.item_name.len());
        out.push!<u8>(import_.item_type);
        WasmModule::write_uleb128(out, import_.item_index);
    };
};

fn WasmModule::write_functions_section(&self, out: &Vec of u8) {
    WasmModule::write_uleb128(out, self.functions.size);
    for i in 0..self.functions.size {
        let fn_index = self.functions.get!<u32>(i);
        WasmModule::write_uleb128(out, fn_index);
    };
};

fn WasmModule::write_memories_section(&self, out: &Vec of u8) {
    WasmModule::write_uleb128(out, self.memories.size);
    for i in 0..self.memories.size {
        let memory_ = self.memories.get!<WasmMemory>(i);
        if memory_.has_max {
            out.push!<u8>(0x01 as u8);
            WasmModule::write_uleb128(out, memory_.min);
            WasmModule::write_uleb128(out, memory_.max);
        } else {
            out.push!<u8>(0x00 as u8);
            WasmModule::write_uleb128(out, memory_.min);
        };
    };
};

fn WasmModule::write_exports_section(&self, out: &Vec of u8) {
    WasmModule::write_uleb128(out, self.exports.size);
    for i in 0..self.exports.size {
        let export_ = self.exports.get!<WasmExport>(i);
        WasmModule::write_uleb128(out, export_.name.len());
        // TODO: won't need a cast if coersion is introduced
        out.push_all(export_.name.chars.data as &void, export_.name.len());
        out.push!<u8>(export_.item_type);
        WasmModule::write_uleb128(out, export_.item_index);
    };
};

fn WasmModule::write_codes_section(&self, out: &Vec of u8) {
    WasmModule::write_uleb128(out, self.codes.size);
    let code_buffer = Vec::new!<u8>();
    defer code_buffer.free();
    for i in 0..self.codes.size {
        let code = self.codes.get!<WasmCode>(i);
        // locals count
        WasmModule::write_uleb128(code_buffer, 0);
        WasmModule::write_expr(code_buffer, code.expr);
        WasmModule::write_uleb128(out, code_buffer.size);
        out.append(code_buffer);
    };
};

fn WasmModule::write_datas_section(&self, out: &Vec of u8) {
    WasmModule::write_uleb128(out, self.datas.size);
    for i in 0..self.datas.size {
        let data = self.datas.get!<WasmData>(i);
        // active mode
        out.push!<u8>(0x00 as u8);
        WasmModule::write_expr(out, data.expr);
        WasmModule::write_uleb128(out, data.bytes.size);
        out.append(data.bytes);
    };
};

fn WasmModule::write_expr(output: &Vec of u8, expr: WasmExpr) {
    for i in 0..expr.instrs.size {
        let instr = expr.instrs.get!<WasmInstr>(i);
        if instr.op_code == WasmInstr::Return::OP_CODE {
            output.push!<u8>(instr.op_code as u8);
            continue;
        };
        if instr.op_code == WasmInstr::Call::OP_CODE {
            output.push!<u8>(instr.op_code as u8);
            let data = instr.data as &WasmInstr::Call;
            WasmModule::write_uleb128(output, data.fn_index);
            continue;
        };
        if instr.op_code == WasmInstr::Drop::OP_CODE {
            output.push!<u8>(instr.op_code as u8);
            continue;
        };
        if instr.op_code == WasmInstr::I32Store::OP_CODE {
            output.push!<u8>(instr.op_code as u8);
            let data = instr.data as &WasmInstr::I32Store;
            WasmModule::write_uleb128(output, data.align);
            WasmModule::write_uleb128(output, data.offset);
            continue;
        };
        if instr.op_code == WasmInstr::I32Const::OP_CODE {
            output.push!<u8>(instr.op_code as u8);
            let data = instr.data as &WasmInstr::I32Const;
            WasmModule::write_sleb128(output, data.value);
            continue;
        };
        unreachable;
    };
    // end
    output.push!<u8>(0x0B as u8);
};

fn WasmModule::write_uleb128(output: &Vec of u8, value: u32) {
    loop {
        let byte = (value & 0x7F) as u8;
        value >>= 7;
        if value == 0 {
            output.push!<u8>(byte);
            break;
        };
        byte |= 0x80 as u8;
        output.push!<u8>(byte);
    };
};

fn WasmModule::write_sleb128(output: &Vec of u8, value: i32) {
    loop {
        let byte = (value & +0x7F) as u8;
        value >>= +7;
        if value == +0 || value == -1 {
            output.push!<u8>(byte);
            break;
        };
        byte |= 0x80 as u8;
        output.push!<u8>(byte);
    };
};
