// str literal type
struct str {
    data: *&u8,
    size: u32,
}

// constants
const u32::MAX = 4_294_967_295

global STATIC_DATA_SIZE = @data_size

// abort
type AbortCode = u32

const AbortCode::SHOULD_NOT_HAPPEN = 0
const AbortCode::OOM = 1
const AbortCode::STACK_OVERFLOW = 2
const AbortCode::STACK_UNDERFLOW = 3
const AbortCode::VEC_OUT_OF_BOUNDS = 4
const AbortCode::STACK_VECTOR_GROW = 5

fn abort(abort_code: AbortCode): never {
    // error indicator
    *(0 as &u32) = 69420
    *(4 as &u32) = abort_code
    unreachable
}

// memory instructions
const mem::PAGE_SIZE = 65_536

fn mem::align(size: u32): u32 {
    return mem::align_to(size, sizeof &void)
}

fn mem::align_to(size: u32, size_multiple: u32): u32 {
    let remaining_to_align = size % size_multiple
    if remaining_to_align == 0 {
        return size
    }
    let padding = size_multiple - remaining_to_align
    return size + padding
}

macro mem::copy!(src: &void, dest: &void, size: u32) {
    __memory_copy(dest as u32, src as u32, size)
}

fn mem::swap(ref1: &void, ref2: &void, size: u32) {
    loop {
        if size == 0 {
            break
        }
        size -= 1
        let tmp = *((ref1 as u32 + size) as &u8)
        *((ref1 as u32 + size) as &u8) = *((ref2 as u32 + size) as &u8)
        *((ref2 as u32 + size) as &u8) = tmp
    }
}

// alloc
const alloc::STACK = 0
const alloc::HEAP = 1

macro new!(alloc_id: u32, value: infer T): &T {
    let ptr = alloc(alloc_id, sizeof T) as &T
    *ptr = value
    ptr
}

macro alloc!<T>(alloc_id: u32): &T {
    alloc(alloc_id, sizeof T) as &T
}

macro alloc_many!<T>(alloc_id: u32, count: u32): *&T {
    alloc(alloc_id, count * sizeof T) as *&T
}

fn alloc(alloc_id: u32, size: u32): &void {
    if alloc_id == 0 {
        return stack::alloc(size)
    }
    return heap::alloc(size)
}

macro free!<T>(alloc_id: u32, ptr: &T) {
    free(alloc_id, ptr, sizeof T)
}

macro free_many!<T>(alloc_id: u32, ptr: *&T, count: u32) {
    free(alloc_id, ptr, count * sizeof T)
}

fn free(alloc_id: u32, ptr: &void, size: u32) {
    if alloc_id == 0 {
        return stack::free(size)
    }
    return heap::free(ptr)
}

// stack
// 1MB, ~20 pages (65_536b)
global stack::SIZE = 1_048_576

// not initialized yet marker
global stack::MIN = u32::MAX

global stack::NOW = 0

macro stack::alloc!<T>(): &T {
    stack::alloc(sizeof T) as &T
}

fn stack::alloc(size: u32): &void {
    size = mem::align(size)
    stack::check_init!()
    stack::NOW += size
    if stack::NOW > stack::MIN + stack::SIZE {
        abort(AbortCode::STACK_OVERFLOW)
    }
    return (stack::NOW - size) as &void
}

macro stack::check_init!() {
    if stack::MIN == u32::MAX {
        stack::MIN = mem::align(STATIC_DATA_SIZE)
        stack::NOW = stack::MIN
    }
}

macro stack::free!<T>() {
    stack::free(sizeof T)
}

fn stack::free(size: u32) {
    size = mem::align(size)
    stack::NOW -= size
    if stack::NOW < stack::MIN {
        abort(AbortCode::STACK_UNDERFLOW)
    }
}

// tmp alloc
macro tmp_alloc!<T>(): &T {
    stack::alloc(sizeof T) as &T
    defer stack::free(sizeof T)
}

macro tmp_alloc_many!<T>(count: u32): *&T {
    stack::alloc(count * sizeof T) as *&T
    defer stack::free(count * sizeof T)
}

// heap
struct heap::Block {
    size: u32,
    used: bool,
}

macro heap::Block::data!(&self): &void {
    (self as u32 + sizeof heap::Block) as &void
}

macro heap::Block::next!(&self): &heap::Block {
    (self.data!() as u32 + self.size) as &heap::Block
}

global heap::FIRST_BLOCK = 0 as &heap::Block

global heap::CURRENT_BLOCK = 0 as &heap::Block

macro heap::new!(value: infer T): &T {
    let ptr = heap::alloc!<T>()
    *ptr = value
    ptr
}

macro heap::alloc!<T>(): &T {
    heap::alloc(sizeof T) as &T
}

macro heap::alloc_many!<T>(count: u32): *&T {
    heap::alloc(count * sizeof T) as *&T
}

// http://dmitrysoshnikov.com/compilers/writing-a-memory-allocator/#mutator-allocator-collector
fn heap::alloc(size: u32): &void {
    size = mem::align(size)
    let free_block = heap::find_free_block(size)
    if free_block as u32 != 0 {
        free_block.used = true
        return free_block.data!()
    }
    if heap::CURRENT_BLOCK as u32 == 0 {
        stack::check_init!()
        heap::CURRENT_BLOCK = (stack::MIN + stack::SIZE) as &heap::Block
        heap::FIRST_BLOCK = heap::CURRENT_BLOCK
    } else {
        heap::CURRENT_BLOCK = heap::CURRENT_BLOCK.next!()
    }
    let new_memory_needed = (heap::CURRENT_BLOCK as u32 + sizeof heap::Block + size) as i32 - __memory_size() * mem::PAGE_SIZE as i32
    if new_memory_needed > +0 {
        let pages_needed = (new_memory_needed as u32 + mem::PAGE_SIZE) / mem::PAGE_SIZE
        if __memory_grow(pages_needed) == -1 {
            abort(AbortCode::OOM)
        }
    }
    heap::CURRENT_BLOCK.size = size
    heap::CURRENT_BLOCK.used = true
    return heap::CURRENT_BLOCK.data!()
}

fn heap::free(ptr: &void) {
    let block = heap::get_block(ptr)
    block.used = false
}

fn heap::get_block(ptr: &void): &heap::Block {
    return (ptr as u32 - sizeof heap::Block) as &heap::Block
}

// first fit
fn heap::find_free_block(size: u32): &heap::Block {
    let block = heap::FIRST_BLOCK
    if block as u32 == 0 {
        return 0 as &heap::Block
    }
    loop {
        if !block.used && block.size >= size {
            return block
        }
        if block as u32 == heap::CURRENT_BLOCK as u32 {
            break
        }
        block = block.next!()
    }
    return 0 as &heap::Block
}

// vec
struct Vec {
    data: &void,
    size: u32,
    capacity: u32,
    item_size: u32,
    alloc_id: u32,
}

macro Vec::new!<T>(): &Vec {
    Vec::new(sizeof T)
}

fn Vec::new(item_size: u32): &Vec {
    return Vec::with_capacity(10, item_size)
}

fn Vec::new_using(item_size: u32, alloc_id: u32): &Vec {
    return Vec::with_capacity_using(10, item_size, alloc_id)
}

macro Vec::with_capacity!<T>(capacity: u32): &Vec {
    Vec::with_capacity(capacity, sizeof T)
}

fn Vec::with_capacity(capacity: u32, item_size: u32): &Vec {
    return Vec::with_capacity_using(capacity, item_size, alloc::HEAP)
}

fn Vec::with_capacity_using(capacity: u32, item_size: u32, alloc_id: u32): &Vec {
    return new!(alloc_id, .Vec {
        data: alloc(alloc_id, capacity * item_size),
        size: 0,
        capacity: capacity,
        item_size: item_size,
        alloc_id: alloc_id,
    })
}

macro Vec::free_deep!<T>(&self) {
    for i in 0..self.size {
        self.get!<T>(i).free()
    }
}

fn Vec::free(&self) {
    free!<Vec>(self.alloc_id, self)
    free(self.alloc_id, self.data, self.capacity)
}

macro Vec::at!<T>(&self, index: u32): &T {
    self.at(index) as &T
}

macro Vec::get!<T>(&self, index: u32): T {
    *self.at!<T>(index)
}

macro Vec::set!(&self, index: u32, item: infer T) {
    *self.at!<T>(index) = item
}

fn Vec::at(&self, index: u32): &void {
    self._panic_if_out_of_bounds!(index)
    return (self.data as u32 + index * self.item_size) as &void
}

fn Vec::at_unchecked(&self, index: u32): &void {
    return (self.data as u32 + index * self.item_size) as &void
}

fn Vec::swap(&self, index1: u32, index2: u32) {
    self._panic_if_out_of_bounds!(index1)
    self._panic_if_out_of_bounds!(index2)
    let item_size = self.item_size
    let item_addr1 = (self.data as u32 + index1 * item_size) as &void
    let item_addr2 = (self.data as u32 + index2 * item_size) as &void
    mem::swap(item_addr1, item_addr2, item_size)
}

macro Vec::push!(&self, item: infer T) {
    *(self.push() as &T) = item
}

fn Vec::push(&self): &void {
    self._grow_to_size(self.size + 1)
    return self.at_unchecked(self.size - 1)
}

fn Vec::push_all(&self, items: &void, items_len: u32) {
    let prev_len = self.size
    self._grow_to_size(prev_len + items_len)
    let items_dest = (self.data as u32 + prev_len * self.item_size) as &void
    mem::copy!(items, items_dest, items_len * self.item_size)
}

fn Vec::append(&self, other: &Vec) {
    self.push_all(other.data, other.size)
    other.size = 0
}

fn Vec::pop_unchecked(&self): &void {
    self.size -= 1
    return self.at_unchecked(self.size)
}

fn Vec::reverse(&self) {
    self.reverse_range(0, self.size - 1)
}

fn Vec::reverse_range(&self, start: u32, end: u32) {
    loop {
        if start >= end {
            break
        }
        self.swap(start, end)
        start += 1
        end -= 1
    }
}

fn Vec::_grow_to_size(&self, new_size: u32) {
    self.size = new_size
    if self.size <= self.capacity {
        return
    }
    if self.alloc_id == alloc::STACK {
        abort(AbortCode::STACK_VECTOR_GROW)
    }
    let item_size = self.item_size
    let old_capacity = self.capacity
    let old_data = self.data
    defer free(self.alloc_id, old_data, old_capacity * item_size)
    self.capacity = old_capacity * 2
    self.data = alloc(self.alloc_id, self.capacity * item_size)
    mem::copy!(old_data, self.data, self.size * item_size)
}

macro Vec::_panic_if_out_of_bounds!(&self, index: u32) {
    if index < 0 || index >= self.size {
        abort(AbortCode::VEC_OUT_OF_BOUNDS)
    }
}

// string
struct String {
    chars: &Vec of u8,
}

fn String::new(capacity: u32): String {
    return .String {
        chars: Vec::with_capacity!<u8>(capacity),
    }
}

fn String::new_using(capacity: u32, alloc_id: u32): String {
    return .String {
        chars: Vec::with_capacity_using(capacity, sizeof u8, alloc_id),
    }
}

fn String::from_chars(chars: &Vec of u8): String {
    return .String {
        chars: chars,
    }
}

fn String::from_str(value: str): String {
    let string = String::new(value.size)
    string.chars.push_all(value.data, value.size)
    return string
}

fn String::free(self) {
    self.chars.free()
}

fn String::clone(self): String {
    return String::from_str(.str {
        data: self.chars.data as *&u8,
        size: self.chars.size,
    })
}

fn String::len(self): u32 {
    return self.chars.size
}

fn String::push_str(self, value: str) {
    self.chars.push_all(value.data, value.size)
}

fn String::push(self, c: u8) {
    self.chars.push!(c)
}

fn String::char_at(self, index: u32): u8 {
    return *self.chars.at!<u8>(index)
}

fn String::as_str(self): str {
    return .str {
        data: self.chars.data as *&u8,
        size: self.chars.size,
    }
}

// str utils
fn str::from_cstr(value: *&u8): str {
    let len = 0
    loop {
        if *((value as u32 + len) as &u8) == 0 as u8 {
            break
        }
        len += 1
    }
    return .str {
        data: value,
        size: len,
    }
}

fn str::char_at(self, index: u32): u8 {
    return *((self.data as u32 + index) as &u8)
}

fn str::clone(self): str {
    let cloned_data = alloc_many!<u8>(alloc::HEAP, self.size)
    mem::copy!(self.data, cloned_data, self.size)
    return .str {
        data: cloned_data,
        size: self.size,
    }
}

fn str::equals(self, other: str): bool {
    if self.size != other.size {
        return false
    }
    for i in 0..self.size {
        if *((self.data as u32 + i) as &u8) != *((other.data as u32 + i) as &u8) {
            return false
        }
    }
    return true
}

fn str::starts_with(self, other: str): bool {
    return self.slice(0, other.size).equals(other)
}

fn str::skip_chars(self, char_count: u32): str {
    if char_count >= self.size {
        return self
    }
    return .str {
        data: (self.data as u32 + char_count) as *&u8,
        size: self.size - char_count,
    }
}

fn str::slice(self, start: u32, end: u32): str {
    if start >= self.size || end >= self.size || start > end {
        return self
    }
    return .str {
        data: (self.data as u32 + start) as *&u8,
        size: end - start,
    }
}

fn char_is_numeric(c: u8): bool {
    return c >= '0' && c <= '9'
}

// conversions
fn u32::to_string(value: u32): String {
    return u32::write(value, String::new(32))
}

fn u32::write(value: u32, output: String): String {
    let start_size = output.len()
    if value == 0 {
        output.push('0')
        return output
    }
    loop {
        let rem = value % 10
        output.push('0' + rem as u8)
        value = value / 10
        if value == 0 {
            break
        }
    }
    output.chars.reverse_range(start_size, output.len() - 1)
    return output
}

fn u64::to_string(value: u64): String {
    return u64::write(value, String::new(32))
}

fn u64::write(value: u64, output: String): String {
    let start_size = output.len()
    if value == 0u64 {
        output.push('0')
        return output
    }
    loop {
        let rem = value % 10u64
        output.push('0' + rem as u32 as u8)
        value = value / 10u64
        if value == 0u64 {
            break
        }
    }
    output.chars.reverse_range(start_size, output.len() - 1)
    return output
}

// utils
macro array_at!<T>(array: *&T, index: u32): &T {
    (array as u32 + index * sizeof T) as &T
}

macro null!<T>(): &T {
    0 as &T
}

macro is_null!<T>(t: &T): bool {
    t as u32 == 0
}
