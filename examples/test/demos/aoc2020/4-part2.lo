include "../../../lib/cli.lo"
include "../../../lib/fs.lo"
include "../../../lib/str_cutter.lo"
include "../../../lib/int_parser.lo"

fn main() {
    let input = fs::read_file!("./examples/test/demos/aoc2020/4.txt")
    defer input.free()

    let valid_passwords = 0
    let passwords = StrCutter::new(input.as_str())

    loop {
        let byr_is_valid = false
        let iyr_is_valid = false
        let eyr_is_valid = false
        let hgt_is_valid = false
        let hcl_is_valid = false
        let ecl_is_valid = false
        let pid_is_valid = false

        passwords = passwords.cut_at("\n\n")
        let lines = StrCutter::new(passwords.piece)
        loop {
            lines = lines.cut_at("\n")
            let fields = StrCutter::new(lines.piece)
            loop {
                fields = fields.cut_at(" ")
                let field_parts = StrCutter::new(fields.piece).cut_at(":")
                let field_name = field_parts.piece
                let field_value = field_parts.rest
                if field_name.equals("byr") {
                    let parse_res = parse_u32(field_value)
                    byr_is_valid = field_value.size == 4 \
                        && parse_res.chars_consumed == 4 \
                        && parse_res.value >= 1920 \
                        && parse_res.value <= 2002
                }
                if field_name.equals("iyr") {
                    let parse_res = parse_u32(field_value)
                    iyr_is_valid = field_value.size == 4 \
                        && parse_res.chars_consumed == 4 \
                        && parse_res.value >= 2010 \
                        && parse_res.value <= 2020
                }
                if field_name.equals("eyr") {
                    let parse_res = parse_u32(field_value)
                    eyr_is_valid = field_value.size == 4 \
                        && parse_res.chars_consumed == 4 \
                        && parse_res.value >= 2020 \
                        && parse_res.value <= 2030
                }
                if field_name.equals("hgt") {
                    let parse_res = parse_u32(field_value)
                    hgt_is_valid = (
                        field_value.size == 5 \
                            && parse_res.chars_consumed == 3 \
                            && parse_res.value >= 150 \
                            && parse_res.value <= 193 \
                            && field_value.skip_chars(3).equals("cm"),
                    ) || (
                        field_value.size == 4 \
                            && parse_res.chars_consumed == 2 \
                            && parse_res.value >= 59 \
                            && parse_res.value <= 76 \
                            && field_value.skip_chars(2).equals("in"),
                    )
                }
                if field_name.equals("hcl") {
                    let parse_res = parse_u32_hex(field_value.skip_chars(1))
                    hcl_is_valid = field_value.char_at(0) == '#' \
                        && field_value.size == 7 \
                        && parse_res.chars_consumed == 6
                }
                if field_name.equals("ecl") {
                    ecl_is_valid = field_value.equals("amb") \
                        || field_value.equals("blu") \
                        || field_value.equals("brn") \
                        || field_value.equals("gry") \
                        || field_value.equals("grn") \
                        || field_value.equals("hzl") \
                        || field_value.equals("oth")
                }
                if field_name.equals("pid") {
                    let parse_res = parse_u32(field_value)
                    pid_is_valid = field_value.size == 9 \
                        && parse_res.chars_consumed == 9
                }
                if fields.rest.size == 0 {
                    break
                }
            }
            if lines.rest.size == 0 {
                break
            }
        }
        if byr_is_valid && iyr_is_valid && eyr_is_valid \
            && hgt_is_valid && hcl_is_valid && ecl_is_valid && pid_is_valid
        {
            valid_passwords += 1
        }
        if passwords.rest.size == 0 {
            break
        }
    }
    print_u32(valid_passwords)
    puts("\n")
}
