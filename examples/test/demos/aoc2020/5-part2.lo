include "../../../lib/cli.lo"
include "../../../lib/fs.lo"

fn main() {
    let input_buf = fs::read_file!("./examples/test/demos/aoc2020/5.txt")
    defer input_buf.free()
    let input = input_buf.as_str()
    // 10 chars seat + newline
    let tickets_count = input.size / 11
    let seat_ids = Vec::with_capacity!<u32>(tickets_count)
    for i in 0..tickets_count {
        let seat_id = parse_seat_id(input.skip_chars(i * 11))
        seat_ids.push!(seat_id)
    }
    selection_sort(seat_ids)
    let prev_seat_id = 0
    for i in 0..tickets_count {
        let seat_id = seat_ids.get!<u32>(i)
        if prev_seat_id + 2 == seat_id {
            print_u32(prev_seat_id + 1)
            puts("\n")
            break
        }
        prev_seat_id = seat_id
    }
}

fn selection_sort(items: &Vec of u32) {
    let n = items.size
    for i in 0..n {
        let min_index = i
        for j in (i + 1)..n {
            if items.get!<u32>(j) < items.get!<u32>(min_index) {
                min_index = j
            }
        }
        if min_index != i {
            items.swap(i, min_index)
        }
    }
}

fn parse_seat_id(input: str): u32 {
    let row_max = 128
    let row_hi = row_max - 1
    let row_lo = 0
    for row_i in 0..7 {
        let c = input.char_at(row_i)
        if c == 'F' {
            row_max /= 2
            row_hi -= row_max
        }
        if c == 'B' {
            row_max /= 2
            row_lo += row_max
        }
    }
    let col_max = 8
    let col_hi = col_max - 1
    let col_lo = 0
    for col_i in 0..3 {
        let c = input.char_at(col_i + 7)
        if c == 'L' {
            col_max /= 2
            col_hi -= col_max
        }
        if c == 'R' {
            col_max /= 2
            col_lo += col_max
        }
    }
    let seat_id = row_lo * 8 + col_lo
    return seat_id
}
