include "../lib/cli.lo"

// Explanation:
// - type `Result<DivisionResult, DivideError>`
//   - is stored as the tuple: (DivisionResult, DivideError)
// - `Ok(ok_value)` adds default value of error type.
//   > NOTE: it's always i32.const 0, so error values must fit into i32
//   >   and reserve 0 as a flag for no error
// - `Err(err_value)` adds default value of ok type
// - default values of `error_type` indicate the absence of an error
//   - error codes fit nicely (0 - no error)
//   - other errors should be passed by a nullabe pointer (null - no error)
fn main() {
    divide_and_print(10, 5)
    divide_and_print(10, 3)
    divide_and_print(10, 0)
}

fn divide_and_print(a: u32, b: u32) {
    puts(a.to_tmp_str!())
    puts(" / ")
    puts(b.to_tmp_str!())
    let result = divide(a, b) catch _ {
        puts(" is undefined\n")
        return
    }
    puts(" = ")
    puts(result.full.to_tmp_str!())
    puts(", remainder = ")
    puts(result.remainder.to_tmp_str!())
    puts("\n")
}

type DivideError = u8

const DivideError::DIVIDE_BY_ZERO = 1 as DivideError

struct DivisionResult {
    full: u32,
    remainder: u32,
}

fn divide(a: u32, b: u32): Result<DivisionResult, DivideError> {
    if b == 0 {
        return Err(DivideError::DIVIDE_BY_ZERO)
    }

    return Ok(.DivisionResult {
        full: a / b,
        remainder: a % b,
    })
}
